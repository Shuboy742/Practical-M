Code 4 -

import numpy as np

# Function to perform Union operation on fuzzy sets
def fuzzy_union(A, B):
    return np.maximum(A, B)

# Function to perform Intersection operation on fuzzy sets
def fuzzy_intersection(A, B):
    return np.minimum(A, B)

# Function to perform Complement operation on a fuzzy set
def fuzzy_complement(A):
    return 1 - A

# Function to perform Difference operation on fuzzy sets
def fuzzy_difference(A, B):
    return np.maximum(A, 1 - B)

# Function to create fuzzy relation by Cartesian product of two fuzzy sets
def cartesian_product(A, B):
    return np.outer(A, B)

# Function to perform Max-Min composition on two fuzzy relations
def max_min_composition(R, S):
    return np.max(np.minimum.outer(R, S), axis=1)

# Example usage
A = np.array([0.2, 0.4, 0.6, 0.8]) # Fuzzy set A
B = np.array([0.3, 0.5, 0.7, 0.9]) # Fuzzy set B

# Operations on fuzzy sets
union_result = fuzzy_union(A, B)
intersection_result = fuzzy_intersection(A, B)
complement_A = fuzzy_complement(A)
difference_result = fuzzy_difference(A, B)

print("Union:", union_result)
print("Intersection:", intersection_result)
print("Complement of A:", complement_A)
print("Difference:", difference_result)

# Fuzzy relations
R = np.array([0.2, 0.5, 0.4]) # Fuzzy relation R
S = np.array([0.6, 0.3, 0.7]) # Fuzzy relation S

# Cartesian product of fuzzy relations
cartesian_result = cartesian_product(R, S)

# Max-Min composition of fuzzy relations
composition_result = max_min_composition(R, S)

print("Cartesian product of R and S:")
print(cartesian_result)

print("Max-Min composition of R and S:")
print(composition_result)





Code 5 -
pip install deap
import random
from deap import base, creator, tools, algorithms

# Define evaluation function (this is a mock function, replace this with your actual evaluation
# function)
def evaluate(individual):
    # Here 'individual' represents the parameters for the neural network
    # You'll need to replace this with your actual evaluation function that trains the neural network
    # and evaluates its performance
    # Return a fitness value (here, a random number is used as an example)
    return random.random(),

# Define genetic algorithm parameters
POPULATION_SIZE = 10
GENERATIONS = 5

# Create types for fitness and individuals in the genetic algorithm
creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
creator.create("Individual", list, fitness=creator.FitnessMin)

# Initialize toolbox
toolbox = base.Toolbox()

# Define attributes and individuals
toolbox.register("attr_neurons", random.randint, 1, 100)  # Example: number of neurons
toolbox.register("attr_layers", random.randint, 1, 5)  # Example: number of layers
toolbox.register("individual", tools.initCycle, creator.Individual, (toolbox.attr_neurons,
                                                                      toolbox.attr_layers), n=1)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)

# Genetic operators
toolbox.register("evaluate", evaluate)
toolbox.register("mate", tools.cxTwoPoint)
toolbox.register("mutate", tools.mutUniformInt, low=1, up=100, indpb=0.2)
toolbox.register("select", tools.selTournament, tournsize=3)

# Create initial population
population = toolbox.population(n=POPULATION_SIZE)

# Run the genetic algorithm
for gen in range(GENERATIONS):
    offspring = algorithms.varAnd(population, toolbox, cxpb=0.5, mutpb=0.1)

    fitnesses = toolbox.map(toolbox.evaluate, offspring)
    for ind, fit in zip(offspring, fitnesses):
        ind.fitness.values = fit

    population = toolbox.select(offspring, k=len(population))

# Get the best individual from the final population
best_individual = tools.selBest(population, k=1)[0]
best_params = best_individual

# Print the best parameters found
print("Best Parameters:", best_params)





Code 6 -

import random
import numpy as np

# Define the objective function
def objective_function(x):
    # Example: Sphere function
    return sum([i**2 for i in x])

# Initialize population
def initialize_population(pop_size, dimensions, lower_bound, upper_bound):
    population = []
    for _ in range(pop_size):
        individual = np.random.uniform(lower_bound, upper_bound, dimensions)
        population.append(individual)
    return population

# Clone an individual
def clone_individual(individual, clone_factor):
    clones = []
    for _ in range(clone_factor):
        clone = np.array(individual)
        for i in range(len(clone)):
            mutation_rate = random.uniform(0, 1)
            if mutation_rate < 0.5:
                clone[i] += random.uniform(-1, 1)
        clones.append(clone)
    return clones
# Select the best individuals
def select_best(population, num_selected, num_clones, clone_factor):
    population.sort(key=lambda x: objective_function(x))
    selected = []
    for i in range(min(len(population), num_selected)):
        clones = clone_individual(population[i], clone_factor)
        selected.extend(clones)
    return selected[:num_clones]


# Main function for clonal selection algorithm
def clonal_selection_algorithm(pop_size, dimensions, lower_bound, upper_bound,
                               num_generations, num_selected, num_clones, clone_factor):
    population = initialize_population(pop_size, dimensions, lower_bound, upper_bound)
    for _ in range(num_generations):
        selected = select_best(population, num_selected, num_clones, clone_factor)
        population = selected
    best_solution = min(population, key=lambda x: objective_function(x))
    return best_solution, objective_function(best_solution)
# Example usage
if __name__ == "__main__":
    pop_size = 100
    dimensions = 2
    lower_bound = -5.0
    upper_bound = 5.0
    num_generations = 100
    num_selected = 10
    num_clones = 5
    clone_factor = 3
    best_solution, best_fitness = clonal_selection_algorithm(pop_size,dimensions, lower_bound,upper_bound, num_generations, num_selected, num_clones, clone_factor)
    print("Best solution:", best_solution)
    print("Best fitness:", best_fitness)

 
